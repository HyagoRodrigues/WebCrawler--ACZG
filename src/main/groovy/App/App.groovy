/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package App

import com.opencsv.CSVWriter
import groovyx.net.http.HttpBuilder
import org.jsoup.nodes.Document
import org.jsoup.nodes.Element
import org.jsoup.select.Elements

import groovyx.net.http.optional.Download

class App {
    static void main(String[] args) {
        //Acessa a página
        Document pagina = access('https://www.gov.br/ans/pt-br');
        //Pega o Link do Espaço Prestador
        String linkEspacoPrestador = pagina.getElementById('ce89116a-3e62-47ac-9325-ebec8ea95473')
                .select('a').first().attr('href')
        //Acessa o Espaço Prestador
        Document espacoPrestador = access(linkEspacoPrestador);
        //Pega o link do Tiss
        String linkTiss = espacoPrestador.select('a.govbr-card-content').attr('href');
        //Acessa o Tiss
        Document tissPadrao = access(linkTiss);
        //Lista de links da página TISS - Padrão para Troca de Informação de Saúde Suplementar
        List<Element> listaTiss = tissPadrao.select('.callout')
        List<String> listaLinks = []
        //Iterando os links
        for (def url : listaTiss) {
            def link = url.select('a').first().attr('href')
            listaLinks << link
        }

        Tiss(listaLinks[0])
        historicoVersoes(listaLinks[1])
        tabelasRelacionadas(listaLinks[2])


    }


    static Document access(String url) {
        Document page = HttpBuilder.configure({
            request.uri = url
        }).get()

        return page

    }

    static void Tiss(String link) {
        //Acessa o Tiss
        Document tiss = access(link);
        //pega a tabela de links
        Elements table = tiss.select('table.table-bordered').select('tbody').first().select('tr')
        //itera sobre a tabela de links
        for (Element tr : table) {
            String td = tr.select('td').first().text();
            if (td.matches('Componente de Comunicação')) {
                String linkDownload = tr.select('a').first().attr('href');
                println(linkDownload)
                download(linkDownload, 'src/Download/tiss.zip')
            }
        }
    }


    static void historicoVersoes(String link) {
        Document historico = access(link)
        List<String[]> table = new ArrayList<>()
        List<Element> historicoVersoes = historico.getElementById('parent-fieldname-text').select('tbody').first().select('tr');


        for (Element tr : historicoVersoes) {
            String comp = tr.select('td')[0].text();
            String publi = tr.select('td')[1].text();
            String vigencia = tr.select('td')[2].text();
            int anoVigencia = Integer.parseInt(comp.split(/\w*\//)[1]);

            if (anoVigencia >= 2016) table.add([comp, publi, vigencia]);


        }


        new File("src/Download/historico-versoes.csv").withWriter({ fileWriter ->
            def csvFileWriter = new CSVWriter(fileWriter)
            String[] thead = ["--Competencia--", "--Publicação--", "--Inicio de Vigencia--"]
            csvFileWriter.writeNext(thead, false)
            for (String[] linha : table) {
                csvFileWriter.writeNext(linha)
            }
        })

    }


    static void tabelasRelacionadas(String link) {
        //Acessa a tabela
        Document table = access(link);
        //Pega o link da tabela
        String tableLink = table.select('a.internal-link').first().attr('href');
        //Download do arquivo xlsx
        download(tableLink, 'src/Download/tabelas-relacionadas.xlsx')
    }

    static void download(String url, String filePath) {
        File newFile = new File(filePath);
        File build = HttpBuilder.configure({
            request.uri = url
        }).get({
            Download.toFile(delegate, newFile)
        })

        build.createNewFile()
    }

}


